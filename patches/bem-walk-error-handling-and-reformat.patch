diff --git a/node_modules/bem-walk/lib/index.js b/node_modules/bem-walk/lib/index.js
index 5dd92a7..7030a1d 100644
--- a/node_modules/bem-walk/lib/index.js
+++ b/node_modules/bem-walk/lib/index.js
@@ -20,12 +20,13 @@ function nested(item, add, walk, done) {
         (depth === 2 && naming.isBlockMod(parent + basename)) ||
         (depth === 2 && naming.isElem(parent + basename)) ||
         (depth === 3 && naming.isElemMod(grandParent + parent + basename))
-    ) {
-        return walk(filename, done);
-    }
+       ) {
+           return walk(filename, done);
+       }
 
     add(item);
     done();
+    return null;
 }
 
 var join = require('path').join;
@@ -47,7 +48,10 @@ module.exports = function (levels) {
 
         function walk(dir, callback) {
             fs.readdir(dir, function (err, items) {
-                if (err) { return; }
+                if (err) {
+                    callback(err);
+                    return;
+                }
 
                 var n = 0,
                     l = items.length;
@@ -92,26 +96,26 @@ module.exports = function (levels) {
                 Object.defineProperty(obj, 'copy', {
                     get: function () {
                         return function (target) {
-                        if (typeof target !== 'object') {
-                            throw new Error('Target object should be instance of Object, not ' + typeof target);
-                        }
-
-                        var props = ['block', 'elem', 'modName', 'modVal'];
-
-                        for (var i = 0; i < props.length; i++) {
-                            var prop = props[i];
-                            if (target[prop]) { break; }
-                            set(target, prop, target[prop] || this[prop]);
-                        }
-
-                        target.tech = target.tech || this.tech;
-                        target.level = target.level || this.level;
-                        target.id = naming.stringify(target);
-                        target.bem = naming.stringify(target);
-                        target.path = defaultPath(target);
-
-                        return target;
-                        }
+                            if (typeof target !== 'object') {
+                                throw new Error('Target object should be instance of Object, not ' + typeof target);
+                            }
+
+                            var props = ['block', 'elem', 'modName', 'modVal'];
+
+                            for (var i = 0; i < props.length; i++) {
+                                var prop = props[i];
+                                if (target[prop]) { break; }
+                                set(target, prop, target[prop] || this[prop]);
+                            }
+
+                            target.tech = target.tech || this.tech;
+                            target.level = target.level || this.level;
+                            target.id = naming.stringify(target);
+                            target.bem = naming.stringify(target);
+                            target.path = defaultPath(target);
+
+                            return target;
+                        };
                     },
                     enumerable: false
                 });
@@ -120,7 +124,6 @@ module.exports = function (levels) {
             }
         }
     }
-
     var n = 0,
         l = levels.length;
 
@@ -139,6 +142,5 @@ module.exports = function (levels) {
 
         ++n === l && output.end();
     }
-
     return output;
 };
